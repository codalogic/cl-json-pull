Tests run on Mon Feb 29 17:13:56 2016

    struct Event [test-event.cpp:38]
    ================================
    ok: event.name == ""
    ok: event.value == ""
    ok: event.type == cljp::Event::T_UNKNOWN
    ok: event.name == "name"
    ok: event.value == "value"
    ok: event.type == cljp::Event::T_STRING
    ok: event.name == ""
    ok: event.value == ""
    ok: event.type == cljp::Event::T_UNKNOWN
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Event simple / convenience is_XXX methods [test-event.cpp:61]
    =============================================================
    ok: event.is_boolean()
    ok: event.is_bool()
    ok: event.is_number()
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Event::is_true and is_false [test-event.cpp:74]
    ===============================================
      Test Event::is_true()
    ok: event.is_true() == true
    ok: event.is_true() == false
    ok: event.is_true() == false
    ok: event.is_true() == false
      Test Event::is_false()
    ok: event.is_false() == true
    ok: event.is_false() == false
    ok: event.is_false() == false
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Event::is_int [test-event.cpp:113]
    ==================================
    ok: event.is_int() == true
    ok: event.is_int() == true
    ok: event.is_int() == true
    ok: event.is_int() == true
    ok: event.is_int() == false
    ok: event.is_int() == false
    ok: event.is_int() == false
    ok: event.is_int() == false
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Event::is() [name] [test-event.cpp:144]
    =======================================
    ok: event.is( "myEvent" )
    ok: event.is( "myEvent", cljp::Event::T_NUMBER )
    ok: ! event.is( "notMyEvent" )
    ok: ! event.is( "notMyEvent", cljp::Event::T_NUMBER )
    ok: ! event.is( "myEvent", cljp::Event::T_STRING )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Event::on() [name] [test-event.cpp:158]
    =======================================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Event::to_bool [test-event.cpp:168]
    ===================================
      Test Event::to_bool() for booleans
    ok: event.to_bool() == false
    ok: event.to_bool() == true
      Test Event::to_bool() for strings
    ok: event.to_bool() == true
    ok: event.to_bool() == true
    ok: event.to_bool() == false
      Test Event::to_bool() for numbers
    ok: event.to_bool() == false
    ok: event.to_bool() == false
    ok: event.to_bool() == false
    ok: event.to_bool() == true
      Test Event::to_bool() for null
    ok: event.to_bool() == false
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Event to_float, to_int [test-event.cpp:225]
    ===========================================
    ok: event.to_float() == 1.0
    ok: event.to_float() == 1.5
    ok: event.to_int() == 1
    ok: event.to_long() == 1
    ok: event.to_float() == -11.5
    ok: event.to_int() == -11
    ok: event.to_long() == -11
      Event to_float, to_int for string to bool then to int/float conversions
    ok: event.to_float() == 1.0
    ok: event.to_float() == 1.0
    ok: event.to_float() == 0.0
    ok: event.to_int() == 1
    ok: event.to_int() == 1
    ok: event.to_int() == 0
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Event to_string, to_wstring [test-event.cpp:274]
    ================================================
    ok: event.to_string() == "MyString"
    ok: event.to_string() == "\xE6\x97\xA5\xE6\x9C\xAC\xE8\xAA\x9E"
    ok: event.to_wstring() == L"MyString"
    ok: event.to_wstring() == L"\x65E5\x672C\x8A9E"
    ok: event.to_wstring() == L"with\x65E5\x672C\x8A9EHold"
    ok: event.to_wstring() == L"\xD808\xDF45=Ra"
    ok: event.to_wstring() == L"with\xD808\xDF45=Ra"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Reading whole messages [test-messages.cpp:67]
    =============================================
      Calling: test_message_sequence( p_message, events ) (75)
    ok: status == events[i].status
      Calling: test_message_sequence( p_message, events ) (85)
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
      Calling: test_message_sequence( p_message, events ) (97)
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
      Calling: test_message_sequence( p_message, events ) (111)
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
      Calling: test_message_sequence( p_message, events ) (125)
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
      Calling: test_message_sequence( p_message, events ) (139)
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
      Calling: test_message_sequence( p_message, events ) (152)
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
      Calling: test_message_sequence( p_message, events ) (166)
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
      Calling: test_message_sequence( p_message, events ) (181)
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
      Calling: test_message_sequence( p_message, events ) (196)
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
      Calling: test_message_sequence( p_message, events ) (210)
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
      Calling: test_message_sequence( p_message, events ) (221)
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
      Calling: test_message_sequence( p_message, events ) (232)
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
      Calling: test_message_sequence( p_message, events ) (247)
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
      Calling: test_message_sequence( p_message, events ) (264)
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
      Calling: test_message_sequence( p_message, events ) (285)
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
      Calling: test_message_sequence( p_message, events ) (296)
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: h.event.type == events[i].type
    ok: h.event.name == events[i].name
    ok: h.event.value == events[i].value
    ok: status == events[i].status
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Reading multiple messages in single stream [test-messages.cpp:300]
    ==================================================================
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == "Message 1"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == "Message 2"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.name == "rate"
    ok: h.event.value == "15"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.name == "rate"
    ok: h.event.value == "10"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser: illegally formed messages [test-messages.cpp:399]
    =========================================================
      Calling: test_invalid_message( "Illegal", cljp::Parser::PS_UNRECOGNISED_VALUE_FORMAT ) (421)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " fals ", cljp::Parser::PS_BAD_FORMAT_FALSE ) (422)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " falsey ", cljp::Parser::PS_BAD_FORMAT_FALSE ) (423)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " truey ", cljp::Parser::PS_BAD_FORMAT_TRUE ) (424)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " nully ", cljp::Parser::PS_BAD_FORMAT_NULL ) (425)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " falsey ", cljp::Parser::PS_BAD_FORMAT_FALSE ) (426)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " 1.0.0 ", cljp::Parser::PS_BAD_FORMAT_NUMBER ) (427)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " \"abc\\u00xxabc\" ", cljp::Parser::PS_BAD_UNICODE_ESCAPE ) (428)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " \"abc\\qabc\" ", cljp::Parser::PS_BAD_FORMAT_STRING ) (429)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " } ", cljp::Parser::PS_UNEXPECTED_OBJECT_CLOSE ) (431)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " ] ", cljp::Parser::PS_UNEXPECTED_ARRAY_CLOSE ) (432)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " [ fals ", cljp::Parser::PS_BAD_FORMAT_FALSE ) (434)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " [[false]} ", cljp::Parser::PS_UNEXPECTED_OBJECT_CLOSE ) (435)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " { \"tag1\" : fals } ", cljp::Parser::PS_BAD_FORMAT_FALSE ) (437)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " { tag1 : false } ", cljp::Parser::PS_EXPECTED_MEMBER_NAME ) (438)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " { 10 : false } ", cljp::Parser::PS_EXPECTED_MEMBER_NAME ) (439)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " { \"tag1\" } ", cljp::Parser::PS_EXPECTED_COLON_NAME_SEPARATOR ) (440)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " { \"tag1\" 10 } ", cljp::Parser::PS_EXPECTED_COLON_NAME_SEPARATOR ) (441)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " { \"tag1\" : false  true } ", cljp::Parser::PS_EXPECTED_COMMA_OR_END_OF_OBJECT ) (442)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " { \"tag1\" : false  \"tag2\" } ", cljp::Parser::PS_EXPECTED_COMMA_OR_END_OF_OBJECT ) (443)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " { \"tag1\" : false : \"tag2\" } ", cljp::Parser::PS_EXPECTED_COMMA_OR_END_OF_OBJECT ) (444)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " { \"tag1\" : false { \"tag2\" } ", cljp::Parser::PS_EXPECTED_COMMA_OR_END_OF_OBJECT ) (445)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( " { \"tag1\" : false ] ", cljp::Parser::PS_UNEXPECTED_ARRAY_CLOSE ) (446)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "[ { \"tag1\" = false } ]", cljp::Parser::PS_EXPECTED_COLON_NAME_SEPARATOR ) (448)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "[ {},[],{ ]", cljp::Parser::PS_UNEXPECTED_ARRAY_CLOSE ) (449)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "[ [{}, 12, .],{} ]", cljp::Parser::PS_BAD_FORMAT_NUMBER ) (450)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "[ {},[], ]", cljp::Parser::PS_UNEXPECTED_ARRAY_CLOSE ) (451)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser truncated input [test-messages.cpp:454]
    ==============================================
      Calling: test_invalid_message( "[ ", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (457)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "[ { ", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (458)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "[ { \"", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (459)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "[ { \"ta", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (460)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "[ { \"tag1\" ", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (461)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "[ { \"tag1\" :", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (462)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "[ { \"tag1\" : fal", cljp::Parser::PS_BAD_FORMAT_FALSE ) (463)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "[ { \"tag1\" : false", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (464)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "[ { \"tag1\" : false }", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (465)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "[ { }", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (468)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "[ { } , ", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (469)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "[ { } , {", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (470)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "[ { } , {}", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (471)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "{", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (474)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "{ \"", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (475)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "{ \"  ", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (476)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "{ \"ta", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (477)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "{ \"tag1\"", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (478)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "{ \"tag1\" :", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (479)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "{ \"tag1\" : [ ", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (480)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "{ \"tag1\" : [ fal", cljp::Parser::PS_BAD_FORMAT_FALSE ) (481)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "{ \"tag1\" : [ false ", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (482)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "{ \"tag1\" : [ false ]", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (483)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "{ \"tag1\" : [ false ], ", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (484)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "{ \"tag1\" : [ false ], \"", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (485)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "{ \"tag1\" : [ false ], \"ta", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (486)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "{ \"tag1\" : [ false ], \"tag2\"", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (487)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "{ \"tag1\" : [ false ], \"tag2\"  ", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (488)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "{ \"tag1\" : [ false ], \"tag2\" : ", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (489)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "{ \"tag1\" : [ false ], \"tag2\" : 12", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (490)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
      Calling: test_invalid_message( "{ \"tag1\" : [ false ], \"tag2\" : 12 ", cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE ) (491)
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status != cljp::Parser::PS_END_OF_MESSAGE
    ok: status == expected_final_status
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Basic Parser [test-parse.cpp:42]
    ================================
      Testing outer parsing handling
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNEXPECTED_OBJECT_CLOSE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNEXPECTED_ARRAY_CLOSE
      Parser::get_in_array();
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNEXPECTED_ARRAY_CLOSE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "12"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == "String"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_BOOLEAN
    ok: h.event.value == "false"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNRECOGNISED_VALUE_FORMAT
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Repeated reads at end of message return 'End of message' [test-parse.cpp:208]
    =============================================================================
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "12"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Reading constant values [test-parse.cpp:252]
    ===================================================
      Parser::get_false()
      Line: 255, input: false
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 256, input:  false
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 257, input: false,
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 258, input: false
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 259, input: false 
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 260, input: false]
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 261, input: false}
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 264, input: f
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 265, input: fal
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 266, input: falsey
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 267, input: false:
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Parser::get_true()
      Line: 270, input: true
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 271, input:  true
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 272, input: true,
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 273, input: true
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 274, input: true 
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 275, input: true]
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 276, input: true}
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 279, input: t
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 280, input: tru
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 281, input: truey
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 282, input: true:
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Parser::get_null()
      Line: 285, input: null
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 286, input:  null
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 287, input: null,
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 288, input: null
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 289, input: null 
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 290, input: null]
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 291, input: null}
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 294, input: n
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 295, input: nul
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 296, input: nully
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 297, input: null:
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Reading number values [test-parse.cpp:322]
    =================================================
      Line: 324, input: 1
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 325, input: 12
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 326, input: 12,
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 327, input: 12 
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 329, input: -1
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 330, input: -12
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 331, input: -
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 332, input: +1
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 334, input: 0
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 335, input: -0
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 336, input: 00
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 337, input: 01
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 338, input: -01
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 340, input: 1.1
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 341, input: 12.12
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 342, input: -12.12
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 343, input: .
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 344, input: 1.
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 345, input: .1
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 346, input: -.
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 347, input: -1.
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 348, input: -.1
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 350, input: 1e1
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 351, input: 1E1
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 352, input: 1e+12
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 353, input: 12e+12
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 354, input: 1e-12
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 355, input: 12e-12
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 356, input: 1.1e+12
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 357, input: 12.12e-12
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 358, input: -12.12e-12
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 359, input: 12.12e12
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 360, input: -12.12e12
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 361, input: 1.e
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 362, input: 1e
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
      Line: 363, input: 1e+ 
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_status
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Back-to-back numbers [test-parse.cpp:366]
    ================================================
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "12.3"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "4.2e+6"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "12.3"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "4.2e+6"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Reading string values [test-parse.cpp:456]
    =================================================
      Parser::get_string()
      Line: 460, input: Fred
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 469, input: Say \"Fred\"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 470, input: Say \nFred\n
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 472, input: Say \\Fred\/
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 473, input: Say \bFred\f
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 474, input: Say \nFred\r
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 475, input: Say \tFred\t
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 477, input: Say \qFred
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_error_code
      Parser::get_string() - char outside unescaped = %x20-21 / %x23-5B / %x5D-10FFFF fails
      Line: 480, input: Say  Fred
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_error_code
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Reading string Unicode escapes [test-parse.cpp:483]
    ==========================================================
      Calling: string_ok_test( __LINE__, "Say \\u002fFred", "Say /Fred" ) (485)
      Line: 485, input: Say \u002fFred
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Calling: string_ok_test( __LINE__, "\\uD800\\uDC02", "\xF0\x90\x80\x82" ) (488)
      Line: 488, input: \uD800\uDC02
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Calling: string_ok_test( __LINE__, "\\ud800\\udc02", "\xF0\x90\x80\x82" ) (489)
      Line: 489, input: \ud800\udc02
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Calling: string_ok_test( __LINE__, "\\u0802", "\xE0\xA0\x82" ) (490)
      Line: 490, input: \u0802
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Calling: string_ok_test( __LINE__, "\\uFFFC", "\xEF\xBF\xBC" ) (491)
      Line: 491, input: \uFFFC
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Calling: string_ok_test( __LINE__, "\\ufffc", "\xEF\xBF\xBC" ) (492)
      Line: 492, input: \ufffc
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Calling: string_ok_test( __LINE__, "\\u0082", "\xC2\x82" ) (493)
      Line: 493, input: \u0082
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Calling: string_ok_test( __LINE__, "\\u07FC", "\xDF\xBC" ) (494)
      Line: 494, input: \u07FC
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Calling: string_ok_test( __LINE__, "X\\uD800\\uDC02A", "X\xF0\x90\x80\x82""A" ) (497)
      Line: 497, input: X\uD800\uDC02A
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Calling: string_ok_test( __LINE__, "X\\u0802A", "X\xE0\xA0\x82""A" ) (498)
      Line: 498, input: X\u0802A
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Calling: string_ok_test( __LINE__, "X\\u0082A", "X\xC2\x82""A" ) (499)
      Line: 499, input: X\u0082A
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Parser::get_string() - truncated BMP unicode escape fails
      Calling: string_fail_test( __LINE__, "Say \\u002 Fred", cljp::Parser::PS_BAD_UNICODE_ESCAPE ) (502)
      Line: 502, input: Say \u002 Fred
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_error_code
      Calling: string_fail_test( __LINE__, "Say \\u002QFred", cljp::Parser::PS_BAD_UNICODE_ESCAPE ) (503)
      Line: 503, input: Say \u002QFred
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_error_code
      Calling: string_ok_test( __LINE__, "\\u65E5\\u672C\\u8A9E", "\xE6\x97\xA5\xE6\x9C\xAC\xE8\xAA\x9E" ) (506)
      Line: 506, input: \u65E5\u672C\u8A9E
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Parser::get_string() - Surrogates unicode escape
      Calling: string_ok_test( __LINE__, "\\uD808\\uDF45=Ra", "\xF0\x92\x8D\x85=Ra" ) (510)
      Line: 510, input: \uD808\uDF45=Ra
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Parser::get_string() - High surrogate without following low surrogate fails
      Calling: string_fail_test( __LINE__, "\\uD808Fred", cljp::Parser::PS_BAD_UNICODE_ESCAPE ) (513)
      Line: 513, input: \uD808Fred
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_error_code
      Calling: string_fail_test( __LINE__, "\\uD808\\u0022", cljp::Parser::PS_BAD_UNICODE_ESCAPE ) (514)
      Line: 514, input: \uD808\u0022
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_error_code
      Parser::get_string() - Low surrogate without preceeding high surrogate fails
      Calling: string_fail_test( __LINE__, "\\uDF45Fred", cljp::Parser::PS_BAD_UNICODE_ESCAPE ) (517)
      Line: 517, input: \uDF45Fred
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_error_code
      Calling: string_fail_test( __LINE__, "\\uDF45\\u0022", cljp::Parser::PS_BAD_UNICODE_ESCAPE ) (518)
      Line: 518, input: \uDF45\u0022
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_error_code
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Reading string with bad Unicode escapes, check parsing terminated mid-string [test-parse.cpp:545]
    ========================================================================================================
      Line: 547, input:  \u002 
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) != cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value.find( "Fred" ) != std::string::npos
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser::get_string() - String end quote in middle of unicode escape code [test-parse.cpp:550]
    =============================================================================================
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) != cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value.find( "Fred" ) != std::string::npos
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Reading string unexpected EOF [test-parse.cpp:564]
    =========================================================
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNEXPECTED_END_OF_MESSAGE
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Read member [test-parse.cpp:574]
    =======================================
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.name == "Field"
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "12"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.name == "Field"
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "12"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.name == "Jam"
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == "High"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.name == "Field"
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "12"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNEXPECTED_OBJECT_CLOSE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.name == "Field"
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "12"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_EXPECTED_COLON_NAME_SEPARATOR
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.name == "Field"
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "12"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_EXPECTED_MEMBER_NAME
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.name == "Field"
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "12"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_EXPECTED_MEMBER_NAME
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_UNABLE_TO_CONTINUE_DUE_TO_ERRORS
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser::skip() [test-parse.cpp:678]
    ===================================
    ok: h.parser.skip() == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_BOOLEAN
    ok: h.parser.skip() == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.skip() == cljp::Parser::PS_OK
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.skip() == cljp::Parser::PS_OK
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.skip() == cljp::Parser::PS_OK
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.event.name == "Field"
    ok: h.parser.skip() == cljp::Parser::PS_OK
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.name == "Honey"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.event.name == "Field"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.event.name == "Jam"
    ok: h.parser.skip() == cljp::Parser::PS_OK
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_NULL
    ok: h.event.name == "Spread"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.event.name == "Field"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.event.name == "Jam"
    ok: h.parser.skip() == cljp::Parser::PS_OK
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_NULL
    ok: h.event.name == "Spread"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.event.name == "Field"
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.event.name == "Jam"
    ok: h.parser.skip() == cljp::Parser::PS_OK
    ok: h.parser.get( &h.event ) == cljp::Parser::PS_OK
    ok: h.event.type == cljp::Event::T_NULL
    ok: h.event.name == "Spread"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Test the test ByteTestSequence [test-read-utf8.cpp:40]
    ======================================================
    ok: MK_STR_WITH_ZEROS( "" ).size() == 0
    ok: MK_STR_WITH_ZEROS( "a" ).size() == 1
    ok: MK_STR_WITH_ZEROS( "\0" ).size() == 1
    ok: MK_STR_WITH_ZEROS( "a\0" ).size() == 2
    ok: MK_STR_WITH_ZEROS( "\0a" ).size() == 2
    ok: MK_STR_WITH_ZEROS( "\0a" )[0] == '\0'
    ok: MK_STR_WITH_ZEROS( "\0a" )[1] == 'a'
    ok: MK_STR_WITH_ZEROS( "\xff""a\0\0" ).size() == 4
    ok: MK_STR_WITH_ZEROS( "\xff""a\0\0" )[0] == '\xff'
    ok: MK_STR_WITH_ZEROS( "\xff""a\0\0" )[1] == 'a'
    ok: MK_STR_WITH_ZEROS( "\xff""a\0\0" )[2] == '\0'
    ok: MK_STR_WITH_ZEROS( "\xff""a\0\0" )[3] == '\0'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - test MK_STR_WITH_ZEROS [test-read-utf8.cpp:114]
    ==========================================================
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "" ), 0, cljp::ReadUTF8::LEARNING ) (116)
    ok: utf8_reader.mode() == expected_mode_in
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-8 input [test-read-utf8.cpp:139]
    ===============================================
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "ab" ), 1, cljp::ReadUTF8::LEARNING_UTF8_OR_LE ) (142)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "ab" ), 1, 'a' ) (143)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "ab" ), 2, cljp::ReadUTF8::UTF8 ) (144)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "ab" ), 2, 'b' ) (145)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\x7f""b" ), 1, 0x7f ) (147)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\x7f""b" ), 2, 'b' ) (148)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a""\x7f" ), 1, 'a' ) (149)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a""\x7f" ), 2, 0x7f ) (150)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "a" ), 2 ) (152)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "abc\xE0\xAC\x8Bz" ), 4, 0xE0 ) (155)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "abc\xE0\xAC\x8Bz" ), 5, 0xAC ) (156)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "abc\xE0\xAC\x8Bz" ), 6, 0x8B ) (157)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "abc\xE0\xAC\x8Bz" ), 7, 'z' ) (158)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "abc\xE0\xAC\x8Bz\xE0\xAC\x8Bz" ), 8, 0xE0 ) (159)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "abc\xE0\xAC\x8Bz\xE0\xAC\x8Bz" ), 9, 0xAC ) (160)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "abc\xE0\xAC\x8Bz\xE0\xAC\x8Bz" ), 10, 0x8B ) (161)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "abc\xE0\xAC\x8Bz\xE0\xAC\x8Bz" ), 11, 'z' ) (162)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "abc\xE0\xAC\x8Bz\xE0\xAC\x8Bz" ), 12 ) (163)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\xE0\xAC\x8Bz" ), 2, 0xE0 ) (166)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\xE0\xAC\x8Bz" ), 3, 0xAC ) (167)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\xE0\xAC\x8Bz" ), 4, 0x8B ) (168)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\xE0\xAC\x8Bz" ), 5, 'z' ) (169)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\xE0\xAC\x8Bz\xE0\xAC\x8Bz" ), 6, 0xE0 ) (170)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\xE0\xAC\x8Bz\xE0\xAC\x8Bz" ), 7, 0xAC ) (171)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\xE0\xAC\x8Bz\xE0\xAC\x8Bz" ), 8, 0x8B ) (172)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\xE0\xAC\x8Bz\xE0\xAC\x8Bz" ), 9, 'z' ) (173)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-8 input with BOM [test-read-utf8.cpp:176]
    ========================================================
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "\xEF\xBB\xBF""ab" ), 1, cljp::ReadUTF8::UTF8 ) (181)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\xEF\xBB\xBF""ab" ), 1, 'a' ) (182)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "\xEF\xBB\xBF""ab" ), 2, cljp::ReadUTF8::UTF8 ) (183)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\xEF\xBB\xBF""ab" ), 2, 'b' ) (184)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\xEF\xBB\xBF" ), 1 ) (186)
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\xEF\xBB\xBF""a" ), 2 ) (187)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\xEF\xBB\xBF""abc\xE0\xAC\x8Bz" ), 4, 0xE0 ) (190)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\xEF\xBB\xBF""abc\xE0\xAC\x8Bz" ), 5, 0xAC ) (191)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\xEF\xBB\xBF""abc\xE0\xAC\x8Bz" ), 6, 0x8B ) (192)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\xEF\xBB\xBF""abc\xE0\xAC\x8Bz" ), 7, 'z' ) (193)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-8 input error cases [test-read-utf8.cpp:198]
    ===========================================================
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "a\0" ), 2 ) (200)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "ab\0" ), 3 ) (201)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "abc\x80" ), 4 ) (202)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "a\x80" ), 2 ) (203)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "abc\xc1\x80" ), 4 ) (204)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "a\xc1\x80" ), 2 ) (205)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "abc\xe0\x90\x80" ), 4 ) (206)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "a\xe0\x90\x80" ), 2 ) (207)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "abc\xed\xa0\x80" ), 4 ) (208)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "a\xed\xa0\x80" ), 2 ) (209)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "abc\xed\xb0\x80" ), 4 ) (210)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "a\xed\xb0\x80" ), 2 ) (211)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "\xEF""a" ), 1 ) (214)
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "\xEF\xBB""a" ), 1 ) (215)
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "\xEF\xBB\xBF""\0" ), 1 ) (217)
    ok: c == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-16LE input [test-read-utf8.cpp:220]
    ==================================================
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "a\0" ), 1, cljp::ReadUTF8::LEARNING_UTF8_OR_LE ) (223)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0" ), 1, 'a' ) (224)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "a\0" ), 2 ) (225)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "a\0\xb\0" ), 1, cljp::ReadUTF8::LEARNING_UTF8_OR_LE ) (228)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\xb\0" ), 1, 'a' ) (229)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "a\0\xb\0" ), 2, cljp::ReadUTF8::UTF16LE ) (230)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\xb\0" ), 2, 0xb ) (231)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "a\0\xb\0" ), 3 ) (232)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0" "\xb\xb" ), 2, 0xE0 ) (234)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0" "\xb\xb" ), 3, 0xAC ) (235)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0" "\xb\xb" ), 4, 0x8B ) (236)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0" "\xb\xb" "z\0" ), 5, 'z' ) (237)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "a\0" "\xb\xb" "z\0" ), 6 ) (238)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "a\0\0\xb" ), 1, cljp::ReadUTF8::LEARNING_UTF8_OR_LE ) (241)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\xb" ), 1, 'a' ) (242)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "a\0\0\xb" ), 2, cljp::ReadUTF8::UTF16LE ) (243)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\xb" ), 2, 0xE0 ) (244)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\xb" ), 3, 0xAC ) (245)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\xb" ), 4, 0x80 ) (246)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0" "\0\xb" "z\0" "b\0" ), 5, 'z' ) (248)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0" "\0\xb" "z\0" "b\0" ), 6, 'b' ) (249)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0" "\0\xb" "z\0" "\0\xb" ), 6, 0xE0 ) (251)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0" "\0\xb" "z\0" "\0\xb" ), 7, 0xAC ) (252)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0" "\0\xb" "z\0" "\0\xb" ), 8, 0x80 ) (253)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\xb0" ), 2, 0xEB ) (255)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\xb0" ), 3, 0x80 ) (256)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\xb0" ), 4, 0x80 ) (257)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-16LE input with BOM [test-read-utf8.cpp:260]
    ===========================================================
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "\xff\xfe" "a\0\xb\0" ), 1, cljp::ReadUTF8::UTF16LE ) (265)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\xff\xfe" "a\0\xb\0" ), 1, 'a' ) (266)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "\xff\xfe" "a\0\xb\0" ), 2, cljp::ReadUTF8::UTF16LE ) (267)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\xff\xfe" "a\0\xb\0" ), 2, 0xb ) (268)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\xff\xfe" "a\0\xb\0" ), 3 ) (269)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-16LE input - verify boundarries in UTF-8 encoding [test-read-utf8.cpp:274]
    =========================================================================================
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\x7f\0" ), 1, 0x7f ) (276)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\x7f\0" ), 2, 0x7f ) (277)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\x80\0" ), 2, 0xC2 ) (278)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\x80\0" ), 3, 0x80 ) (279)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "a\0\x80\0" ), 4 ) (280)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\xff\x7" ), 2, 0xDF ) (282)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\xff\x7" ), 3, 0xBF ) (283)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "a\0\xff\x7" ), 4 ) (284)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\x00\x08" ), 2, 0xE0 ) (286)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\x00\x08" ), 3, 0xA0 ) (287)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\x00\x08" ), 4, 0x80 ) (288)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "a\0\x00\x08" ), 5 ) (289)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\xff\xff" ), 2, 0xEF ) (291)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\xff\xff" ), 3, 0xBF ) (292)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\xff\xff" ), 4, 0xBF ) (293)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "a\0\xff\xff" ), 5 ) (294)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-16LE input surrogates [test-read-utf8.cpp:299]
    =============================================================
      UTF16LE surrogate pair in detection phase
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "a\0\x00\xD8\x00\xDCz\0" ), 2, cljp::ReadUTF8::UTF16LE ) (302)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\x00\xD8\x00\xDCz\0" ), 2, 0xf0 ) (303)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\x00\xD8\x00\xDCz\0" ), 3, 0x90 ) (304)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\x00\xD8\x00\xDCz\0" ), 4, 0x80 ) (305)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\x00\xD8\x00\xDCz\0" ), 5, 0x80 ) (306)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\x00\xD8\x00\xDCz\0" ), 6, 'z' ) (307)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "a\0\x00\xD8\x00\xDCz\0" ), 7 ) (308)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      UTF16LE surrogate pair in post-detection phase
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "a\0b\0c\0\x00\xD8\x00\xDCz\0" ), 2, cljp::ReadUTF8::UTF16LE ) (311)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0b\0c\0\x00\xD8\x00\xDCz\0" ), 4, 0xf0 ) (312)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0b\0c\0\x00\xD8\x00\xDCz\0" ), 5, 0x90 ) (313)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0b\0c\0\x00\xD8\x00\xDCz\0" ), 6, 0x80 ) (314)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0b\0c\0\x00\xD8\x00\xDCz\0" ), 7, 0x80 ) (315)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0b\0c\0\x00\xD8\x00\xDCz\0" ), 8, 'z' ) (316)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "a\0b\0c\0\x00\xD8\x00\xDCz\0" ), 9 ) (317)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-16LE input error cases [test-read-utf8.cpp:320]
    ==============================================================
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "a\0b" ), 2 ) (323)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "a\0\x00\xD8" ), 2 ) (324)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "a\0\x00\xD8\0" ), 2 ) (325)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "a\0\x00\xD8z\0" ), 2 ) (326)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "a\0\x00\xDC" ), 2 ) (327)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "\xff\x0" "a\0\xb\0" ), 1 ) (330)
    ok: c == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-16BE input [test-read-utf8.cpp:333]
    ==================================================
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "\0z" ), 1, cljp::ReadUTF8::UTF16BE ) (341)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z" ), 1, 'z' ) (342)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\0z" ), 2 ) (343)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "\0z\0\xb" ), 1, cljp::ReadUTF8::UTF16BE ) (345)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\0\xb" ), 1, 'z' ) (346)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "\0z\0\xb" ), 2, cljp::ReadUTF8::UTF16BE ) (347)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\0\xb" ), 2, 0xb ) (348)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\0z\0\xb" ), 3 ) (349)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z" "\xb\xb" ), 2, 0xE0 ) (351)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z" "\xb\xb" ), 3, 0xAC ) (352)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z" "\xb\xb" ), 4, 0x8B ) (353)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z" "\xb\xb" "\0z" ), 5, 'z' ) (354)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\0z" "\xb\xb" "\0z" ), 6 ) (355)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "\0z\xb\0" ), 1, cljp::ReadUTF8::UTF16BE ) (357)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\xb\0" ), 1, 'z' ) (358)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "\0z\xb\0" ), 2, cljp::ReadUTF8::UTF16BE ) (359)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\xb\0" ), 2, 0xE0 ) (360)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\xb\0" ), 3, 0xAC ) (361)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\xb\0" ), 4, 0x80 ) (362)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z" "\xb\0" "\0z" "\0y" ), 5, 'z' ) (364)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z" "\xb\0" "\0z" "\0y" ), 6, 'y' ) (365)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z" "\xb\0" "\0z" "\xb\0" ), 6, 0xE0 ) (367)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z" "\xb\0" "\0z" "\xb\0" ), 7, 0xAC ) (368)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z" "\xb\0" "\0z" "\xb\0" ), 8, 0x80 ) (369)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\xb0\0" ), 2, 0xEB ) (371)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\xb0\0" ), 3, 0x80 ) (372)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\xb0\0" ), 4, 0x80 ) (373)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-16BE input with BOM [test-read-utf8.cpp:376]
    ===========================================================
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "\xfe\xff" "\0a\0\xb" ), 1, cljp::ReadUTF8::UTF16BE ) (379)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\xfe\xff" "\0a\0\xb" ), 1, 'a' ) (380)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "\xfe\xff" "\0a\0\xb" ), 2, cljp::ReadUTF8::UTF16BE ) (381)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\xfe\xff" "\0a\0\xb" ), 2, 0xb ) (382)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\xfe\xff" "\0a\0\xb" ), 3 ) (383)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-16BE input - verify boundarries in UTF-8 encoding [test-read-utf8.cpp:388]
    =========================================================================================
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\x7f" ), 1, 0x7f ) (390)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\0\x7f" ), 2, 0x7f ) (391)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\0\x80" ), 2, 0xC2 ) (392)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\0\x80" ), 3, 0x80 ) (393)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\0z\0\x80" ), 4 ) (394)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\x7\xff" ), 2, 0xDF ) (396)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\x7\xff" ), 3, 0xBF ) (397)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\0z\x7\xff" ), 4 ) (398)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\x08\x00" ), 2, 0xE0 ) (400)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\x08\x00" ), 3, 0xA0 ) (401)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\x08\x00" ), 4, 0x80 ) (402)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\0z\x08\x00" ), 5 ) (403)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\xff\xff" ), 2, 0xEF ) (405)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\xff\xff" ), 3, 0xBF ) (406)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\xff\xff" ), 4, 0xBF ) (407)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\0z\xff\xff" ), 5 ) (408)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-16BE input surrogates [test-read-utf8.cpp:413]
    =============================================================
      UTF16BE surrogate pair in detection phase
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "\0z\xD8\x00\xDC\x00\0z" ), 2, cljp::ReadUTF8::UTF16BE ) (416)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\xD8\x00\xDC\x00\0z" ), 2, 0xf0 ) (417)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\xD8\x00\xDC\x00\0z" ), 3, 0x90 ) (418)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\xD8\x00\xDC\x00\0z" ), 4, 0x80 ) (419)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\xD8\x00\xDC\x00\0z" ), 5, 0x80 ) (420)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\xD8\x00\xDC\x00\0z" ), 6, 'z' ) (421)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\0z\xD8\x00\xDC\x00\0z" ), 7 ) (422)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      UTF16BE surrogate pair in post-detection phase
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "\0z\0m\0n\xD8\x00\xDC\x00\0z" ), 2, cljp::ReadUTF8::UTF16BE ) (425)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\0m\0n\xD8\x00\xDC\x00\0z" ), 4, 0xf0 ) (426)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\0m\0n\xD8\x00\xDC\x00\0z" ), 5, 0x90 ) (427)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\0m\0n\xD8\x00\xDC\x00\0z" ), 6, 0x80 ) (428)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\0m\0n\xD8\x00\xDC\x00\0z" ), 7, 0x80 ) (429)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0z\0m\0n\xD8\x00\xDC\x00\0z" ), 8, 'z' ) (430)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\0z\0m\0n\xD8\x00\xDC\x00\0z" ), 9 ) (431)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-16BE input error cases [test-read-utf8.cpp:434]
    ==============================================================
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "\0" ), 1 ) (437)
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "\0a\0" ), 2 ) (438)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "\0a\xD8\x00" ), 2 ) (439)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "\0a\xD8\x00\xDC" ), 2 ) (440)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "\0a\xD8\x00\0" ), 2 ) (441)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "\0a\xD8\x00\0z" ), 2 ) (442)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "\0a\xDC\x00" ), 2 ) (443)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "\xfe\x0" "a\0\xb\0" ), 1 ) (446)
    ok: c == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-32LE input [test-read-utf8.cpp:449]
    ==================================================
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "z\0\0\0" ), 1, cljp::ReadUTF8::LEARNING_UTF8_OR_LE ) (452)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "z\0\0\0" ), 1, 'z' ) (453)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "z\0\0\0" ), 2 ) (454)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "z\0\0\0a\0\0\0" ), 2, cljp::ReadUTF8::UTF32LE ) (456)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "z\0\0\0a\0\0\0" ), 2, 'a' ) (457)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "z\0\0\0a\0\0\0" ), 3 ) (458)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-32LE input with BOM [test-read-utf8.cpp:461]
    ===========================================================
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "\xff\xfe\0\0" "a\0\0\0" "\xb\0\0\0" ), 1, cljp::ReadUTF8::UTF32LE ) (466)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\xff\xfe\0\0" "a\0\0\0" "\xb\0\0\0" ), 1, 'a' ) (467)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "\xff\xfe\0\0" "a\0\0\0" "\xb\0\0\0" ), 2, cljp::ReadUTF8::UTF32LE ) (468)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\xff\xfe\0\0" "a\0\0\0" "\xb\0\0\0" ), 2, 0xb ) (469)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\xff\xfe\0\0" "a\0\0\0" "\xb\0\0\0" ), 3 ) (470)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-32LE input - verify boundarries in UTF-8 encoding [test-read-utf8.cpp:475]
    =========================================================================================
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\x7f\0\0\0" ), 1, 0x7f ) (477)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\0" "\x7f\0\0\0" ), 2, 0x7f ) (478)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\0" "\x80\0\0\0" ), 2, 0xC2 ) (479)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\0" "\x80\0\0\0" ), 3, 0x80 ) (480)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "a\0\0\0" "\x80\0\0\0" ), 4 ) (481)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\0" "\xff\x7\0\0" ), 2, 0xDF ) (483)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\0" "\xff\x7\0\0" ), 3, 0xBF ) (484)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "a\0\0\0" "\xff\x7\0\0" ), 4 ) (485)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\0" "\x00\x08\0\0" ), 2, 0xE0 ) (487)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\0" "\x00\x08\0\0" ), 3, 0xA0 ) (488)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\0" "\x00\x08\0\0" ), 4, 0x80 ) (489)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "a\0\0\0" "\x00\x08\0\0" ), 5 ) (490)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\0" "\xff\xff\0\0" ), 2, 0xEF ) (492)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\0" "\xff\xff\0\0" ), 3, 0xBF ) (493)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\0" "\xff\xff\0\0" ), 4, 0xBF ) (494)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "a\0\0\0" "\xff\xff\0\0" ), 5 ) (495)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\0" "\x00\x00\x01\0" ), 2, 0xF0 ) (497)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\0" "\x00\x00\x01\0" ), 3, 0x90 ) (498)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\0" "\x00\x00\x01\0" ), 4, 0x80 ) (499)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\0" "\x00\x00\x01\0" ), 5, 0x80 ) (500)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "a\0\0\0" "\x00\x00\x01\0" ), 6 ) (501)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\0" "\xff\xff\x10\0" ), 2, 0xF4 ) (503)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\0" "\xff\xff\x10\0" ), 3, 0x8F ) (504)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\0" "\xff\xff\x10\0" ), 4, 0xBF ) (505)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "a\0\0\0" "\xff\xff\x10\0" ), 5, 0xBF ) (506)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "a\0\0\0" "\xff\xff\x10\0" ), 6 ) (507)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-32LE input error cases [test-read-utf8.cpp:510]
    ==============================================================
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "a\0\0\0" "\0\xd8\0\0" ), 2 ) (513)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "a\0\0\0" "\0\xdc\0\0" ), 2 ) (514)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "\xfe\x0\0\0" "a\0\0\0" "\xb\0\0\0" ), 1 ) (517)
    ok: c == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-32BE input [test-read-utf8.cpp:520]
    ==================================================
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "\0\0\0z" ), 1, cljp::ReadUTF8::UTF32BE ) (527)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0z" ), 1, 'z' ) (528)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\0\0\0z" ), 2 ) (529)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "\0\0\0z\0\0\0a" ), 2, cljp::ReadUTF8::UTF32BE ) (531)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0z\0\0\0a" ), 2, 'a' ) (532)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\0\0\0z\0\0\0a" ), 3 ) (533)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-32BE input with BOM [test-read-utf8.cpp:536]
    ===========================================================
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "\0\0\xfe\xff" "\0\0\0a" "\0\0\0\xb" ), 1, cljp::ReadUTF8::UTF32BE ) (543)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\xfe\xff" "\0\0\0a" "\0\0\0\xb" ), 1, 'a' ) (544)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf_detection( MK_STR_WITH_ZEROS( "\0\0\xfe\xff" "\0\0\0a" "\0\0\0\xb" ), 2, cljp::ReadUTF8::UTF32BE ) (545)
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.get() != cljp::Reader::EOM
    ok: utf8_reader.mode() == expected_mode_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\xfe\xff" "\0\0\0a" "\0\0\0\xb" ), 2, 0xb ) (546)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\0\0\xfe\xff" "\0\0\0a" "\0\0\0\xb" ), 3 ) (547)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-32LE input - verify boundarries in UTF-8 encoding [test-read-utf8.cpp:552]
    =========================================================================================
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0\x7f" ), 1, 0x7f ) (554)
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0a" "\0\0\0\x7f" ), 2, 0x7f ) (555)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0a" "\0\0\0\x80" ), 2, 0xC2 ) (556)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0a" "\0\0\0\x80" ), 3, 0x80 ) (557)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\0\0\0a" "\0\0\0\x80" ), 4 ) (558)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0a" "\0\0\x7\xff" ), 2, 0xDF ) (560)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0a" "\0\0\x7\xff" ), 3, 0xBF ) (561)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\0\0\0a" "\0\0\x7\xff" ), 4 ) (562)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0a" "\x00\0\x08\0" ), 2, 0xE0 ) (564)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0a" "\x00\0\x08\0" ), 3, 0xA0 ) (565)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0a" "\x00\0\x08\0" ), 4, 0x80 ) (566)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\0\0\0a" "\x00\0\x08\0" ), 5 ) (567)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0a" "\0\0\xff\xff" ), 2, 0xEF ) (569)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0a" "\0\0\xff\xff" ), 3, 0xBF ) (570)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0a" "\0\0\xff\xff" ), 4, 0xBF ) (571)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\0\0\0a" "\0\0\xff\xff" ), 5 ) (572)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0a" "\x00\x01\x00\0" ), 2, 0xF0 ) (574)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0a" "\x00\x01\x00\0" ), 3, 0x90 ) (575)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0a" "\x00\x01\x00\0" ), 4, 0x80 ) (576)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0a" "\x00\x01\x00\0" ), 5, 0x80 ) (577)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\0\0\0a" "\x00\x01\x00\0" ), 6 ) (578)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0a" "\0\x10\xff\xff" ), 2, 0xF4 ) (580)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0a" "\0\x10\xff\xff" ), 3, 0x8F ) (581)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0a" "\0\x10\xff\xff" ), 4, 0xBF ) (582)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get( MK_STR_WITH_ZEROS( "\0\0\0a" "\0\x10\xff\xff" ), 5, 0xBF ) (583)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == expected_c_in
      Calling: test_utf8_get_is_end( MK_STR_WITH_ZEROS( "\0\0\0a" "\0\x10\xff\xff" ), 6 ) (584)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - UTF-32BE input error cases [test-read-utf8.cpp:587]
    ==============================================================
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "\0\0\0a" "\0\0\xd8\0" ), 2 ) (590)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "\0\0\0a" "\0\0\xdc\0" ), 2 ) (591)
    ok: c != cljp::Reader::EOM
    ok: c == cljp::Reader::EOM
      Calling: test_utf8_get_errored( MK_STR_WITH_ZEROS( "\0\0\xfe\0" "\0\0\0a" "\0\0\0\xb" ), 1 ) (594)
    ok: c == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 - Rewind [test-read-utf8.cpp:627]
    ==========================================
      Calling: test_utf8_rewind( MK_STR_WITH_ZEROS( "ab" ), cljp::ReadUTF8::UTF8, 'b' ) (629)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
      Calling: test_utf8_rewind( MK_STR_WITH_ZEROS( "\xEF\xBB\xBF""ab" ), cljp::ReadUTF8::UTF8, 'b' ) (630)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
      Calling: test_utf8_rewind( MK_STR_WITH_ZEROS( "a\0b\0" ), cljp::ReadUTF8::UTF16LE, 'b' ) (631)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
      Calling: test_utf8_rewind( MK_STR_WITH_ZEROS( "\xff\xfe" "a\0b\0" ), cljp::ReadUTF8::UTF16LE, 'b' ) (632)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
      Calling: test_utf8_rewind( MK_STR_WITH_ZEROS( "\0z\0b" ), cljp::ReadUTF8::UTF16BE, 'b' ) (633)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
      Calling: test_utf8_rewind( MK_STR_WITH_ZEROS( "\xfe\xff" "\0a\0b" ), cljp::ReadUTF8::UTF16BE, 'b' ) (634)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
      Calling: test_utf8_rewind( MK_STR_WITH_ZEROS( "z\0\0\0b\0\0\0" ), cljp::ReadUTF8::UTF32LE, 'b' ) (635)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
      Calling: test_utf8_rewind( MK_STR_WITH_ZEROS( "\xff\xfe\0\0" "a\0\0\0" "b\0\0\0" ), cljp::ReadUTF8::UTF32LE, 'b' ) (636)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
      Calling: test_utf8_rewind( MK_STR_WITH_ZEROS( "\0\0\0z\0\0\0b" ), cljp::ReadUTF8::UTF32BE, 'b' ) (637)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
      Calling: test_utf8_rewind( MK_STR_WITH_ZEROS( "\0\0\xfe\xff" "\0\0\0a" "\0\0\0b" ), cljp::ReadUTF8::UTF32BE, 'b' ) (638)
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
    ok: c != cljp::Reader::EOM
    ok: c != cljp::Reader::EOM
    ok: r_utf8_reader.mode() == expected_mode_in
    ok: c == expected_c_in
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    class ReaderMemory [test-reader.cpp:38]
    =======================================
    ok: reader.get() == 'a'
    ok: reader.get() == 'b'
    ok: reader.get() == 'c'
    ok: reader.get() == cljp::Reader::EOM
    ok: reader.get() == cljp::Reader::EOM
    ok: reader.get() == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    class ReaderFile [test-reader.cpp:61]
    =====================================
    ok: fout.is_open()
    ok: reader.is_open()
    ok: reader.get() == 'a'
    ok: reader.get() == 'b'
    ok: reader.get() == 'c'
    ok: reader.get() == 0x00f2
    ok: reader.get() == cljp::Reader::EOM
    ok: reader.get() == 'a'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    class ReadUTF8WithUnget [test-reader.cpp:88]
    ============================================
    ok: input.get() == 'a'
    ok: input.get() == 'b'
    ok: input.get() == 'f'
    ok: input.get() == 'h'
    ok: input.get() == 'g'
    ok: input.get() == 'c'
    ok: input.get() == cljp::Reader::EOM
    ok: input.get() == cljp::Reader::EOM
    ok: input.get() == cljp::Reader::EOM
    ok: input.get() == 'h'
    ok: input.get() == 'g'
    ok: input.get() == cljp::Reader::EOM
    ok: input.get() == cljp::Reader::EOM
    ok: input.get_non_ws() == 'a'
    ok: input.get_non_ws() == 'b'
    ok: input.get_non_ws() == 'c'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    TODOs [test-todo.cpp:38]
    ========================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )
    ok: _CrtCheckMemory() != 0

TODOs (1):
------------------------
- Add Event::on( "name", type, handler ) method to allow easier handling of events [test-event.cpp:160]

0 error(s), 1 todo(s), 2610 test(s)
