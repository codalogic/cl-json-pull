Tests run on Sat Oct 05 11:47:27 2013

    struct Event [test-event.cpp:38]
    ================================
    ok: event.name == ""
    ok: event.value == ""
    ok: event.type == cljp::Event::T_UNKNOWN
    ok: event.name == "name"
    ok: event.value == "value"
    ok: event.type == cljp::Event::T_STRING
    ok: event.name == ""
    ok: event.value == ""
    ok: event.type == cljp::Event::T_UNKNOWN
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Basic Parser [test-parse.cpp:55]
    ================================
      Testing outer parsing handling
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_READ_PAST_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_UNEXPECTED_OBJECT_CLOSE
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_UNEXPECTED_ARRAY_CLOSE
      Parser::get_in_array();
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_UNEXPECTED_ARRAY_CLOSE
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser truncated input [test-parse.cpp:182]
    ===========================================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Reading constant values [test-parse.cpp:214]
    ===================================================
      Parser::get_false()
      Line: 217, input: false
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 218, input:  false
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 219, input: false,
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 220, input: false
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 221, input: false 
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 222, input: false]
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 223, input: false}
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 226, input: f
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 227, input: fal
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 228, input: falsey
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 229, input: false:
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Parser::get_true()
      Line: 232, input: true
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 233, input:  true
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 234, input: true,
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 235, input: true
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 236, input: true 
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 237, input: true]
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 238, input: true}
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 241, input: t
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 242, input: tru
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 243, input: truey
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 244, input: true:
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Parser::get_null()
      Line: 247, input: null
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 248, input:  null
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 249, input: null,
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 250, input: null
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 251, input: null 
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 252, input: null]
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 253, input: null}
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 256, input: n
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 257, input: nul
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 258, input: nully
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 259, input: null:
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Reading number values [test-parse.cpp:284]
    =================================================
      Line: 288, input: 1
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 289, input: 12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 290, input: 12,
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 291, input: 12 
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 293, input: -1
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 294, input: -12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 295, input: -
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 296, input: +1
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 298, input: 0
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 299, input: -0
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 300, input: 00
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 302, input: 1.1
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 303, input: 12.12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 304, input: -12.12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 305, input: 1.
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 307, input: 1e1
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 308, input: 1e+12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 309, input: 12e+12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 310, input: 1e-12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 311, input: 12e-12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 312, input: 1.1e+12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 313, input: 12.12e-12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 314, input: -12.12e-12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 315, input: 1.e
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 316, input: 1e
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 317, input: 1e+ 
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Back-to-back numbers [test-parse.cpp:320]
    ================================================
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "12.3"
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "4.2e+6"
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "12.3"
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "4.2e+6"
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Reading string values [test-parse.cpp:410]
    =================================================
      Parser::get_string()
      Line: 414, input: Fred
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 423, input: Say \"Fred\"
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 424, input: Say \nFred\n
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 426, input: Say \\Fred\/
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 427, input: Say \bFred\f
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 428, input: Say \nFred\r
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 429, input: Say \tFred\t
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 431, input: Say \qFred
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_error_code
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Reading string unexpected EOF [test-parse.cpp:434]
    =========================================================
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_UNEXPECTED_END_OF_MESSAGE
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    class ReaderMemory [test-reader.cpp:38]
    =======================================
    ok: reader.get() == 'a'
    ok: reader.get() == 'b'
    ok: reader.get() == 'c'
    ok: reader.get() == cljp::Reader::EOM
    ok: reader.get() == cljp::Reader::EOM
    ok: reader.get() == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    class ReaderFile [test-reader.cpp:61]
    =====================================
    ok: fout.is_open()
    ok: reader.is_open()
    ok: reader.get() == 'a'
    ok: reader.get() == 'b'
    ok: reader.get() == 'c'
    ok: reader.get() == 0x00f2
    ok: reader.get() == cljp::Reader::EOM
    ok: reader.get() == 'a'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    class ReadUTF8WithUnget [test-reader.cpp:88]
    ============================================
    ok: input.get() == 'a'
    ok: input.get() == 'b'
    ok: input.get() == 'f'
    ok: input.get() == 'h'
    ok: input.get() == 'g'
    ok: input.get() == 'c'
    ok: input.get() == cljp::Reader::EOM
    ok: input.get() == cljp::Reader::EOM
    ok: input.get() == cljp::Reader::EOM
    ok: input.get() == 'h'
    ok: input.get() == 'g'
    ok: input.get() == cljp::Reader::EOM
    ok: input.get() == cljp::Reader::EOM
    ok: input.get_non_ws() == 'a'
    ok: input.get_non_ws() == 'b'
    ok: input.get_non_ws() == 'c'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ok: ! _CrtMemDifference( &s3, &s1, &s2 )
    ok: _CrtCheckMemory() != 0

TODOs (13):
------------------------
- Test Event::as_bool() [test-event.cpp:60]
- Test Event::as_number() [test-event.cpp:61]
- Parser::get_in_object(); [test-parse.cpp:179]
- Parser truncated input [test-parse.cpp:184]
- Parser::get_number() [test-parse.cpp:286]
- class UTFConverter [test-todo.cpp:40]
- class ReadUTF8 [test-todo.cpp:45]
- ReadUTF8: test reading in UTF8 [test-todo.cpp:47]
- ReadUTF8: test reading in UTF16LE [test-todo.cpp:48]
- ReadUTF8: test reading in UTF16BE [test-todo.cpp:49]
- ReadUTF8: test reading in UTF32LE [test-todo.cpp:50]
- ReadUTF8: test reading in UTF32BE [test-todo.cpp:51]
- class SmartParser [test-todo.cpp:56]

0 error(s), 13 todo(s), 423 test(s)
