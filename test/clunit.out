Tests run on Mon May 25 14:55:19 2015

    struct Event [test-event.cpp:38]
    ================================
    ok: event.name == ""
    ok: event.value == ""
    ok: event.type == cljp::Event::T_UNKNOWN
    ok: event.name == "name"
    ok: event.value == "value"
    ok: event.type == cljp::Event::T_STRING
    ok: event.name == ""
    ok: event.value == ""
    ok: event.type == cljp::Event::T_UNKNOWN
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Event simple / convenience is_XXX methods [test-event.cpp:61]
    =============================================================
    ok: event.is_boolean()
    ok: event.is_bool()
    ok: event.is_number()
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Event::is_true and is_false [test-event.cpp:74]
    ===============================================
      Test Event::is_true()
    ok: event.is_true() == true
    ok: event.is_true() == false
    ok: event.is_true() == false
    ok: event.is_true() == false
      Test Event::is_false()
    ok: event.is_false() == true
    ok: event.is_false() == false
    ok: event.is_false() == false
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Event::is_int [test-event.cpp:113]
    ==================================
    ok: event.is_int() == true
    ok: event.is_int() == true
    ok: event.is_int() == true
    ok: event.is_int() == true
    ok: event.is_int() == false
    ok: event.is_int() == false
    ok: event.is_int() == false
    ok: event.is_int() == false
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Event::to_bool [test-event.cpp:144]
    ===================================
      Test Event::to_bool() for booleans
    ok: event.to_bool() == false
    ok: event.to_bool() == true
      Test Event::to_bool() for strings
    ok: event.to_bool() == true
    ok: event.to_bool() == true
    ok: event.to_bool() == false
      Test Event::to_bool() for numbers
    ok: event.to_bool() == false
    ok: event.to_bool() == false
    ok: event.to_bool() == false
    ok: event.to_bool() == true
      Test Event::to_bool() for null
    ok: event.to_bool() == false
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Event to_float, to_int [test-event.cpp:201]
    ===========================================
    ok: event.to_float() == 1.0
    ok: event.to_float() == 1.5
    ok: event.to_int() == 1
    ok: event.to_long() == 1
    ok: event.to_float() == -11.5
    ok: event.to_int() == -11
    ok: event.to_long() == -11
    ok: event.to_float() == 1.0
    ok: event.to_float() == 1.0
    ok: event.to_float() == 0.0
    ok: event.to_int() == 1
    ok: event.to_int() == 1
    ok: event.to_int() == 0
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Messages [test-messages.cpp:38]
    ===============================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Basic Parser [test-parse.cpp:55]
    ================================
      Testing outer parsing handling
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_READ_PAST_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_UNEXPECTED_OBJECT_CLOSE
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_UNEXPECTED_ARRAY_CLOSE
      Parser::get_in_array();
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_UNEXPECTED_ARRAY_CLOSE
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "12"
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == "String"
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_BOOLEAN
    ok: h.event.value == "false"
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_END_OF_MESSAGE
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_UNRECOGNISED_VALUE_FORMAT
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_END_OF_MESSAGE
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser truncated input [test-parse.cpp:221]
    ===========================================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Reading constant values [test-parse.cpp:253]
    ===================================================
      Parser::get_false()
      Line: 256, input: false
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 257, input:  false
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 258, input: false,
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 259, input: false
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 260, input: false 
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 261, input: false]
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 262, input: false}
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 265, input: f
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 266, input: fal
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 267, input: falsey
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 268, input: false:
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Parser::get_true()
      Line: 271, input: true
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 272, input:  true
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 273, input: true,
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 274, input: true
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 275, input: true 
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 276, input: true]
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 277, input: true}
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 280, input: t
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 281, input: tru
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 282, input: truey
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 283, input: true:
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Parser::get_null()
      Line: 286, input: null
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 287, input:  null
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 288, input: null,
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 289, input: null
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 290, input: null 
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 291, input: null]
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 292, input: null}
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 295, input: n
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 296, input: nul
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 297, input: nully
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 298, input: null:
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Reading number values [test-parse.cpp:323]
    =================================================
      Line: 325, input: 1
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 326, input: 12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 327, input: 12,
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 328, input: 12 
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 330, input: -1
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 331, input: -12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 332, input: -
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 333, input: +1
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 335, input: 0
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 336, input: -0
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 337, input: 00
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 338, input: 01
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 339, input: -01
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 341, input: 1.1
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 342, input: 12.12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 343, input: -12.12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 344, input: .
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 345, input: 1.
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 346, input: .1
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 347, input: -.
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 348, input: -1.
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 349, input: -.1
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 351, input: 1e1
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 352, input: 1E1
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 353, input: 1e+12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 354, input: 12e+12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 355, input: 1e-12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 356, input: 12e-12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 357, input: 1.1e+12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 358, input: 12.12e-12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 359, input: -12.12e-12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 360, input: 12.12e12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 361, input: -12.12e12
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: h.event.type == expected_type
    ok: h.event.value == p_expected_value
      Line: 362, input: 1.e
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 363, input: 1e
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
      Line: 364, input: 1e+ 
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_result
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Back-to-back numbers [test-parse.cpp:367]
    ================================================
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "12.3"
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "4.2e+6"
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "12.3"
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "4.2e+6"
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_END
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Reading string values [test-parse.cpp:457]
    =================================================
      Parser::get_string()
      Line: 461, input: Fred
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 470, input: Say \"Fred\"
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 471, input: Say \nFred\n
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 473, input: Say \\Fred\/
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 474, input: Say \bFred\f
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 475, input: Say \nFred\r
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 476, input: Say \tFred\t
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Line: 478, input: Say \qFred
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_error_code
      Parser::get_string() - char outside unescaped = %x20-21 / %x23-5B / %x5D-10FFFF fails
      Line: 481, input: Say  Fred
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_error_code
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Reading string Unicode escapes [test-parse.cpp:484]
    ==========================================================
      Calling: string_ok_test( __LINE__, "Say \\u002fFred", "Say /Fred" ) (486)
      Line: 486, input: Say \u002fFred
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Parser::get_string() - truncated BMP unicode escape fails
      Calling: string_fail_test( __LINE__, "Say \\u002 Fred", cljp::Parser::PR_BAD_UNICODE_ESCAPE ) (489)
      Line: 489, input: Say \u002 Fred
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_error_code
      Calling: string_fail_test( __LINE__, "Say \\u002QFred", cljp::Parser::PR_BAD_UNICODE_ESCAPE ) (490)
      Line: 490, input: Say \u002QFred
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_error_code
      Calling: string_ok_test( __LINE__, "\\u65E5\\u672C\\u8A9E", "\xE6\x97\xA5\xE6\x9C\xAC\xE8\xAA\x9E" ) (493)
      Line: 493, input: \u65E5\u672C\u8A9E
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Parser::get_string() - Surrogates unicode escape
      Calling: string_ok_test( __LINE__, "\\uD808\\uDF45=Ra", "\xF0\x92\x8D\x85=Ra" ) (497)
      Line: 497, input: \uD808\uDF45=Ra
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == p_expected_value
      Parser::get_string() - High surrogate without following low surrogate fails
      Calling: string_fail_test( __LINE__, "\\uD808Fred", cljp::Parser::PR_BAD_UNICODE_ESCAPE ) (500)
      Line: 500, input: \uD808Fred
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_error_code
      Calling: string_fail_test( __LINE__, "\\uD808\\u0022", cljp::Parser::PR_BAD_UNICODE_ESCAPE ) (501)
      Line: 501, input: \uD808\u0022
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_error_code
      Parser::get_string() - Low surrogate without preceeding high surrogate fails
      Calling: string_fail_test( __LINE__, "\\uDF45Fred", cljp::Parser::PR_BAD_UNICODE_ESCAPE ) (504)
      Line: 504, input: \uDF45Fred
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_error_code
      Calling: string_fail_test( __LINE__, "\\uDF45\\u0022", cljp::Parser::PR_BAD_UNICODE_ESCAPE ) (505)
      Line: 505, input: \uDF45\u0022
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == expected_error_code
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Reading string with bad Unicode escapes, check parsing not terminated mid-string [test-parse.cpp:534]
    ============================================================================================================
      Line: 536, input:  \u002 
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) != cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value.find( "Fred" ) != std::string::npos
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == "Bill"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser::get_string() - String end quote in middle of unicode escape code [test-parse.cpp:539]
    =============================================================================================
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) != cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value.find( "Fred" ) != std::string::npos
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == "Bill"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Reading string unexpected EOF [test-parse.cpp:555]
    =========================================================
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_ARRAY_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_UNEXPECTED_END_OF_MESSAGE
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Parser Read member [test-parse.cpp:565]
    =======================================
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.name == "Field"
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "12"
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_END
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_START
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.name == "Field"
    ok: h.event.type == cljp::Event::T_NUMBER
    ok: h.event.value == "12"
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.name == "Jam"
    ok: h.event.type == cljp::Event::T_STRING
    ok: h.event.value == "High"
    ok: h.parser.get( &h.event ) == cljp::Parser::PR_OK
    ok: h.event.type == cljp::Event::T_OBJECT_END
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    class ReaderMemory [test-reader.cpp:38]
    =======================================
    ok: reader.get() == 'a'
    ok: reader.get() == 'b'
    ok: reader.get() == 'c'
    ok: reader.get() == cljp::Reader::EOM
    ok: reader.get() == cljp::Reader::EOM
    ok: reader.get() == cljp::Reader::EOM
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    class ReaderFile [test-reader.cpp:61]
    =====================================
    ok: fout.is_open()
    ok: reader.is_open()
    ok: reader.get() == 'a'
    ok: reader.get() == 'b'
    ok: reader.get() == 'c'
    ok: reader.get() == 0x00f2
    ok: reader.get() == cljp::Reader::EOM
    ok: reader.get() == 'a'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    class ReadUTF8WithUnget [test-reader.cpp:88]
    ============================================
    ok: input.get() == 'a'
    ok: input.get() == 'b'
    ok: input.get() == 'f'
    ok: input.get() == 'h'
    ok: input.get() == 'g'
    ok: input.get() == 'c'
    ok: input.get() == cljp::Reader::EOM
    ok: input.get() == cljp::Reader::EOM
    ok: input.get() == cljp::Reader::EOM
    ok: input.get() == 'h'
    ok: input.get() == 'g'
    ok: input.get() == cljp::Reader::EOM
    ok: input.get() == cljp::Reader::EOM
    ok: input.get_non_ws() == 'a'
    ok: input.get_non_ws() == 'b'
    ok: input.get_non_ws() == 'c'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    UTFConverter [test-todo.cpp:38]
    ===============================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    JSON Text can just be a value [test-todo.cpp:43]
    ================================================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Object member testing [test-todo.cpp:50]
    ========================================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ReadUTF8 [test-todo.cpp:55]
    ===========================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    TODOs [test-todo.cpp:67]
    ========================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )
    ok: _CrtCheckMemory() != 0

TODOs (11):
------------------------
- Reading whole messages using compound reader [test-messages.cpp:40]
- Parser truncated input [test-parse.cpp:223]
- class UTFConverter [test-todo.cpp:40]
- JSON Text can just be a value [test-todo.cpp:45]
- Test that 'name' in a 'member' is correct format (inc opening quotes) [test-todo.cpp:52]
- class ReadUTF8 [test-todo.cpp:57]
- ReadUTF8: test reading in UTF8 [test-todo.cpp:59]
- ReadUTF8: test reading in UTF16LE [test-todo.cpp:60]
- ReadUTF8: test reading in UTF16BE [test-todo.cpp:61]
- ReadUTF8: test reading in UTF32LE [test-todo.cpp:62]
- ReadUTF8: test reading in UTF32BE [test-todo.cpp:63]

0 error(s), 11 todo(s), 598 test(s)
